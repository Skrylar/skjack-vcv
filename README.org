
This plugin aims to bring first class support for the JACK Audio
Connection Kit to VCV Rack.

* Modules
** JACK Audio

#+CAPTION: Annotated image of the JACK Audio module.
[[doc/module-fs8.png]]

 - There are four input and four output ports.
 - Output ports are marked with an off-color accent.
 - Each port may be named individually, and the name supplied in Rack
   will appear in your JACK patch bay.
 - Every input must have a name that is unique across inputs.
 - Every output must have a name that is unique across outputs.
 - If four ports are not enough, simply add more to a patch. Each
   module will create four input and output ports. All modules
   cooperate to ensure that audio is sent and received through JACK in
   lockstep (you can consult the power meter to see that only one of
   the JACK Audio modules will stall Rack.)

*** Port names
In =0.6.6= and prior, all port names had to be unique. Due to
confusion and people's desire to use the same name for inputs and
outputs (ex. chorus for both in and output) this behavior was changed.
=0.6.7= now suffixes =-out= to all output ports and =-in= to all input
ports. This means that if both an input and output have the name =01=
in Rack, you will see =01-in= and =01-out= in your patchbay. This
behavior is idiomatic and found in mainstream JACK applications
(Ardour, non mixer.) It does mean that saved sessions *are
incompatible* between these two versions.

*** TODO Latency information
We do not currently calculate the delay from the time audio might
enter Rack and leave it again. This means we don't tell JACK how much
time we expect to take, and so it cannot perform any delay
compensation.

If you try to play an input stream in to Rack, and simultaneously to a
monitor, you will hear a short delay effect as the two signals are not
correctly synchronized. There may also be issues trying to synchronize
audio between separate running instances of Rack.

These issues should only give you trouble for relatively advanced JACK
patches. They have no effect on the default use case of a single Rack
instance generating sound on its own and sending them to =Ardour= or
=non mixer= for recording or out-of-Rack effects processing.

*** Clashes with Core and rcm
On some systems JACK will take control of the audio device (on Linux,
it takes over your ALSA sound card.) Trying to have both JACK and Rack
connect to ALSA will result in performance issues or possibly
crashes.

It is advisable that you delete any =Audio= modules from =Core= or any
=Audio 16= modules from =rcm= when working with JACK. It is possible
to leave them in a patch unused, but trying to delete them while a
JACK server is running (even if you don't have SkJACK installed!) **can
and will result in sadness of the crashing variety.**

JACK modules do not have this problem in reverse. If SkJACK is
installed and JACK is not, or a JACK server is not running, the
modules will silently do nothing.

** TODO Clock
** TODO MIDI

* Licenses

** Graphics
The module graphics template was designed by github user
[[https://github.com/infamedavid][@infamedavid (David Rodriguez)]], and are available via CC-BY.

** 3270 Font
The [[https://github.com/rbanffy/3270font][3270 terminal font]] is used under the BSD-3 license.

** SkJACK
This plugin is made available under BSD-3.

** JACK
A copy of the JACK client headers are included under =src/jack=, which
are made available to us under the LGPL license.

We have included them because it primarily simplifies compiling the
plugin on Windows (MinGW2) targets.
